import { resolveConfig } from '../config.js';
const createEmptyReadableStream = ()=>new ReadableStream({
        start (controller) {
            controller.close();
        }
    });
export const runner = (options)=>{
    const entriesPromise = options.cmd === 'start' ? options.loadEntries() : 'Error: loadEntries are not available';
    const configPromise = options.cmd === 'start' ? entriesPromise.then((entries)=>entries.loadConfig().then((config)=>resolveConfig(config))) : resolveConfig(options.config);
    const handlersPromise = configPromise.then((config)=>Promise.all(config.middleware(options.cmd).map(async (middleware)=>(await middleware).default(options))));
    return async (c, next)=>{
        const ctx = {
            req: {
                body: c.req.raw.body || createEmptyReadableStream(),
                url: new URL(c.req.url),
                method: c.req.method,
                headers: c.req.header()
            },
            res: {},
            context: {}
        };
        const handlers = await handlersPromise;
        const run = async (index)=>{
            if (index >= handlers.length) {
                return next();
            }
            let alreadyCalled = false;
            await handlers[index](ctx, async ()=>{
                if (!alreadyCalled) {
                    alreadyCalled = true;
                    await run(index + 1);
                }
            });
        };
        await run(0);
        return c.body(ctx.res.body || null, ctx.res.status || 200, ctx.res.headers || {});
    };
};
