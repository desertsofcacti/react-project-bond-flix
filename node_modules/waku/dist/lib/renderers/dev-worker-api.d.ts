import type { ResolvedConfig } from '../config.js';
import type { HotUpdatePayload } from '../plugins/vite-plugin-rsc-hmr.js';
import type { RenderRscArgs, GetSsrConfigArgs } from './rsc-renderer.js';
import type { ClonableModuleNode } from '../middleware/types.js';
export type BuildOutput = {
    rscFiles: string[];
    htmlFiles: string[];
};
export type MessageReq = ({
    id: number;
    type: 'render';
    searchParamsString: string;
    initialModules: ClonableModuleNode[];
    hasModuleIdCallback: boolean;
} & Omit<RenderRscArgs, 'searchParams' | 'moduleIdCallback' | 'config'> & {
    config: Omit<ResolvedConfig, 'middleware'>;
}) | {
    id: number;
    type: 'getSsrConfig';
    config: Omit<ResolvedConfig, 'middleware'>;
    pathname: string;
    searchParamsString: string;
    initialModules: ClonableModuleNode[];
};
export type MessageRes = {
    type: 'hot-update';
    payload: HotUpdatePayload;
} | {
    id: number;
    type: 'start';
    context: Record<string, unknown> | undefined;
    stream: ReadableStream;
} | {
    id: number;
    type: 'err';
    err: unknown;
    statusCode?: number;
} | {
    id: number;
    type: 'moduleId';
    moduleId: string;
} | {
    id: number;
    type: 'ssrConfig';
    input: string;
    searchParamsString?: string | undefined;
    body: ReadableStream;
} | {
    id: number;
    type: 'noSsrConfig';
};
export declare function initializeWorker(config: ResolvedConfig): void;
export declare function registerHotUpdateCallback(fn: (payload: HotUpdatePayload) => void): void;
export declare function renderRscWithWorker(args: RenderRscArgs, opts: {
    initialModules: ClonableModuleNode[];
}): Promise<ReadableStream>;
export declare function getSsrConfigWithWorker(args: GetSsrConfigArgs, opts: {
    initialModules: ClonableModuleNode[];
}): Promise<{
    input: string;
    searchParams?: URLSearchParams;
    body: ReadableStream;
} | null>;
