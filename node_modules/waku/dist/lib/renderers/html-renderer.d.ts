import type { EntriesPrd } from '../../server.js';
import type { ResolvedConfig } from '../config.js';
export declare const CLIENT_MODULE_MAP: {
    readonly react: "react";
    readonly 'rd-server': "react-dom/server.edge";
    readonly 'rsdw-client': "react-server-dom-webpack/client.edge";
    readonly 'waku-client': "waku/client";
};
export declare const CLIENT_PREFIX = "client/";
export declare const renderHtml: (opts: {
    config: Omit<ResolvedConfig, 'middleware'>;
    pathname: string;
    searchParams: URLSearchParams;
    htmlHead: string;
    renderRscForHtml: (input: string, searchParams: URLSearchParams) => Promise<ReadableStream>;
    getSsrConfigForHtml: (pathname: string, searchParams: URLSearchParams) => Promise<{
        input: string;
        searchParams?: URLSearchParams;
        body: ReadableStream;
    } | null>;
} & ({
    isDev: false;
    loadModule: EntriesPrd['loadModule'];
} | {
    isDev: true;
    rootDir: string;
    loadServerFile: (fileURL: string) => Promise<unknown>;
})) => Promise<ReadableStream | null>;
