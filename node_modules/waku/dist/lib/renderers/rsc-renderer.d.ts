import type { EntriesDev, EntriesPrd } from '../../server.js';
import type { ResolvedConfig } from '../config.js';
export declare const SERVER_MODULE_MAP: {
    readonly 'rsdw-server': "react-server-dom-webpack/server.edge";
    readonly 'waku-server': "waku/server";
};
export type RenderRscArgs = {
    config: Omit<ResolvedConfig, 'middleware'>;
    input: string;
    searchParams: URLSearchParams;
    method: 'GET' | 'POST';
    context: Record<string, unknown> | undefined;
    body?: ReadableStream | undefined;
    contentType?: string | undefined;
    moduleIdCallback?: ((id: string) => void) | undefined;
};
type RenderRscOpts = {
    isDev: false;
    entries: EntriesPrd;
} | {
    isDev: true;
    entries: EntriesDev;
    loadServerFile: (fileURL: string) => Promise<unknown>;
    resolveClientEntry: (id: string) => string;
};
export declare function renderRsc(args: RenderRscArgs, opts: RenderRscOpts): Promise<ReadableStream>;
export declare function getBuildConfig(opts: {
    config: ResolvedConfig;
    entries: EntriesPrd;
}): Promise<import("../../server.js").BuildConfig>;
export type GetSsrConfigArgs = {
    config: Omit<ResolvedConfig, 'middleware'>;
    pathname: string;
    searchParams: URLSearchParams;
};
type GetSsrConfigOpts = {
    isDev: false;
    entries: EntriesPrd;
} | {
    isDev: true;
    entries: EntriesDev;
    resolveClientEntry: (id: string) => string;
};
export declare function getSsrConfig(args: GetSsrConfigArgs, opts: GetSsrConfigOpts): Promise<{
    body: any;
    input: string;
    searchParams?: URLSearchParams;
} | null>;
export {};
