import type { Config } from '../config.js';
type DeepRequired<T> = T extends (...args: any[]) => any ? T : T extends object ? {
    [P in keyof T]-?: DeepRequired<T[P]>;
} : T;
export type ResolvedConfig = DeepRequired<Config>;
export declare function resolveConfig(config: Config): Promise<{
    basePath: string;
    srcDir: string;
    distDir: string;
    preserveModuleDirs: string[];
    privateDir: string;
    rscPath: string;
    htmlAttrs: string;
    htmlHead: string;
    middleware: (cmd: "dev" | "start") => Promise<{
        default: import("./middleware/types.js").Middleware;
    }>[];
}>;
export declare const EXTENSIONS: string[];
export {};
