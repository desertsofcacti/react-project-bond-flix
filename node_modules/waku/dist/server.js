export function defineEntries(renderEntries, getBuildConfig, getSsrConfig) {
    return {
        renderEntries,
        getBuildConfig,
        getSsrConfig
    };
}
export function getEnv(key) {
    // HACK we may want to use a server-side context or something
    return globalThis.__WAKU_PRIVATE_ENV__[key];
}
let renderStorage;
// TODO top-level await doesn't work. Let's revisit after supporting "use server"
// try {
//   const { AsyncLocalStorage } = await import('node:async_hooks');
//   renderStorage = new AsyncLocalStorage();
// } catch (e) {
//   console.warn(
//     'AsyncLocalStorage is not available, rerender and getContext are only available in sync.',
//   );
// }
import('node:async_hooks').then(({ AsyncLocalStorage })=>{
    renderStorage = new AsyncLocalStorage();
}).catch(()=>{
    console.warn('AsyncLocalStorage is not available, rerender and getContext are only available in sync.');
});
let previousRenderStore;
let currentRenderStore;
/**
 * This is an internal function and not for public use.
 */ export const runWithRenderStore = (renderStore, fn)=>{
    if (renderStorage) {
        return renderStorage.run(renderStore, fn);
    }
    previousRenderStore = currentRenderStore;
    currentRenderStore = renderStore;
    try {
        return fn();
    } finally{
        currentRenderStore = previousRenderStore;
    }
};
export function rerender(input, searchParams) {
    const renderStore = renderStorage?.getStore() ?? currentRenderStore;
    if (!renderStore) {
        throw new Error('Render store is not available');
    }
    renderStore.rerender(input, searchParams);
}
export function getContext() {
    const renderStore = renderStorage?.getStore() ?? currentRenderStore;
    if (!renderStore) {
        throw new Error('Render store is not available');
    }
    return renderStore.context;
}
