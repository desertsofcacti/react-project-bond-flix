import { Component } from 'react';
import type { ReactNode, AnchorHTMLAttributes, ReactElement } from 'react';
import type { RouteProps, ShouldSkip } from './common.js';
declare global {
    interface ImportMeta {
        readonly env: Record<string, string>;
    }
}
export declare function useRouter_UNSTABLE(): {
    push: (to: string) => void;
    replace: (to: string) => void;
    reload: () => void;
    back: () => void;
    forward: () => void;
    prefetch: (to: string) => void;
    path: string;
    searchParams: URLSearchParams;
    value: RouteProps;
};
export type LinkProps = {
    to: string;
    pending?: ReactNode;
    notPending?: ReactNode;
    children: ReactNode;
    unstable_prefetchOnEnter?: boolean;
    unstable_prefetchOnView?: boolean;
} & Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'href'>;
export declare function Link({ to, children, pending, notPending, unstable_prefetchOnEnter, unstable_prefetchOnView, ...props }: LinkProps): ReactElement;
type RouterData = [
    shouldSkip?: ShouldSkip,
    locationListners?: Set<(pathname: string, searchParamsString: string) => void>
];
export declare function Router({ routerData }: {
    routerData?: RouterData | undefined;
}): import("react").CElement<{
    children: ReactNode;
}, ErrorBoundary>;
/**
 * ServerRouter for SSR
 * This is not a public API.
 */
export declare function ServerRouter({ children, route, }: {
    children: ReactNode;
    route: RouteProps;
}): import("react").FunctionComponentElement<{
    children?: ReactNode;
}>;
declare class ErrorBoundary extends Component<{
    children: ReactNode;
}, {
    error?: unknown;
}> {
    constructor(props: {
        children: ReactNode;
    });
    static getDerivedStateFromError(error: unknown): {
        error: unknown;
    };
    render(): ReactNode;
}
export {};
